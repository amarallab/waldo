#!/usr/bin/env python
"""preprocess.

Usage:
  preprocess <command> [options] <id>...
  preprocess (-h | --help)
  preprocess --version

Commands:
  cache            precalculate image threshold values to speed up marking
  mark             manually annotate threshold and ROI images using GUI
  score            scores recording based on image quality
  prepare          convert text data into CSVs
  images           use annotated images to calculate
  finish           runs both 'prepare' and 'images'


Arguments:
   id              can be either dataset names or experiment ids

Options:
  -o --overwrite   If data already exists, write over it.
  -h --help        Show this screen.
  --version        Show version.

"""

__author__ = 'Peter B. Winter'
__email__ = 'peterwinteriii@gmail.com'
__status__ = 'prototype'

# standard imports
import json
import glob

import os


# third party
from docopt import docopt

# project specific
import pathcustomize
from waldo.conf import settings
import waldo.images.threshold_picker as tp
from waldo import images
from waldo import prepare
from waldo.wio import file_manager as fm

PROJECT_DATA_ROOT = settings.PROJECT_DATA_ROOT

def cache_image_data(eids, threshold_file, overwrite=True):
    fm.ensure_dir_exists(CACHE_DIR)
    fm.ensure_dir_exists(IMAGE_MARK_DIR)
    if not eids:
        return
    if not overwrite:
        cached_files = glob.glob(os.path.join(CACHE_DIR, '*'))
        cached_eids = [n.split('cache-')[-1] for n in cached_files]
        cached_eids = [n.split('.json')[0] for n in cached_eids]
        eids_todo = set(eids) - set(cached_eids)
        already_done = set(eids) & set(cached_eids)
        print '{ad} already done'.format(ad=len(already_done))
        eids = list(eids_todo)
    ip = images.InteractivePlot(eids)
    ip.precalculate_threshold_data()

def mark_images_interactivly(eid, threshold_file, overwrite=True):
    fm.ensure_dir_exists(PROJECT_DATA_ROOT)
    if not eid:
        return
    # currently defunct
    ip = tp.InteractivePlot(eid)
    ip.run_plot()

if __name__ == '__main__':
    arguments = docopt(__doc__, version='prep 0.1')
    #print(arguments)
    # todo: get parse_ids back from older repo version
    #eids_by_dset = parse_ids(arguments['<id>'])
    cmd = arguments['<command>']
    overwrite = arguments['--overwrite']
    eids = arguments['<id>']
    for eid in eids:
        print '{cmd}ing {n} recordings'.format(cmd=cmd,
                                               n=len(eids))

        filename = '{eid}-thresholddata.json'.format(eid=eid)
        threshold_file = os.path.join(PROJECT_DATA_ROOT, filename)
        print threshold_file
        if cmd == 'cache':
            cache_image_data(eids, threshold_file=threshold_file,
                             overwrite=overwrite)
        elif cmd == 'mark':
            mark_images_interactivly(eid, threshold_file=threshold_file,
                             overwrite=overwrite)
        elif cmd == 'prepare':
            for ex_id in eids:
                prepare.summarize(ex_id, verbose=True) #csvs from blob data

        elif cmd == 'images':
            for ex_id in eids:
                images.summarize(ex_id) #csvs from images

        elif cmd  == 'finish':
            for ex_id in eids:
                print ex_id, 'creating blob data csvs'
                prepare.summarize(ex_id, verbose=True) #csvs from blob data
            for ex_id in eids:
                print ex_id, 'creating image data csvs'
                images.summarize(ex_id) #csvs from images

        elif cmd  == 'score':
            for ex_id in eids:
                images.score(ex_id)
