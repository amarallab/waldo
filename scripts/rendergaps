#!/usr/bin/env python
"""
rendergaps

Creates images for screening from a two-column CSV of gaps

Example:
    ./rendergaps 20130702_135652 gaps.csv

Running the script in it's own empty folder is advisable as it will generate
a few thousand images.

    mkdir ../data/testset1
    cd ../data/testset1
    ../../scripts/rendergaps 20130702_135652 ../mypath/gaps.csv
"""
from __future__ import print_function, absolute_import

# standard library
import sys
import argparse

# third party
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib.collections import PatchCollection
from PIL import Image, ImageOps, ImageChops

# project specific
import pathcustomize

import waldo
from waldo.viz import show_gap

def main():
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument('experiment_id',
        help="Experiment ID to use.")
    parser.add_argument('input_file', type=argparse.FileType('r'),
        help="File with blob IDs to render. Accepts stdin as -")

    args = parser.parse_args()
    eid = args.experiment_id

    experiment = waldo.Experiment(experiment_id=eid)

    for line in args.input_file:
        try:
            gap = [int(x) for x in line.split(',')]
        except:
            continue

        if not gap:
            continue

        if len(gap) != 2:
            continue
            print('Wrong gap length {}:\n >> {}'.format(len(gap), line))

        try:
            f, ax = show_gap(experiment, *gap)
            fn = '{}_{:05}_{:05}.png'.format(eid, *gap)

            f.savefig(fn)
            print('Saved gap from blob {} to {}'.format(*gap))

            plt.close('all')
        except Exception as e:
            print('Failed to process gap {}'.format(gap))
            raise e

if __name__ == '__main__':
    sys.exit(main())
